package com.example.sjh.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.sjh.gcsjdemo.entity.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE".
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, String> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, String.class, "msgId", true, "MSG_ID");
        public final static Property MsgContent = new Property(1, String.class, "msgContent", false, "MSG_CONTENT");
        public final static Property From = new Property(2, int.class, "from", false, "FROM");
        public final static Property MsgTimetag = new Property(3, String.class, "msgTimetag", false, "MSG_TIMETAG");
        public final static Property MsgTeam = new Property(4, String.class, "msgTeam", false, "MSG_TEAM");
    }


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE\" (" + //
                "\"MSG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: msgId
                "\"MSG_CONTENT\" TEXT NOT NULL ," + // 1: msgContent
                "\"FROM\" INTEGER NOT NULL ," + // 2: from
                "\"MSG_TIMETAG\" TEXT NOT NULL ," + // 3: msgTimetag
                "\"MSG_TEAM\" TEXT NOT NULL );"); // 4: msgTeam
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
        stmt.bindString(2, entity.getMsgContent());
        stmt.bindLong(3, entity.getFrom());
        stmt.bindString(4, entity.getMsgTimetag());
        stmt.bindString(5, entity.getMsgTeam());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
        stmt.bindString(2, entity.getMsgContent());
        stmt.bindLong(3, entity.getFrom());
        stmt.bindString(4, entity.getMsgTimetag());
        stmt.bindString(5, entity.getMsgTeam());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msgId
            cursor.getString(offset + 1), // msgContent
            cursor.getInt(offset + 2), // from
            cursor.getString(offset + 3), // msgTimetag
            cursor.getString(offset + 4) // msgTeam
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMsgContent(cursor.getString(offset + 1));
        entity.setFrom(cursor.getInt(offset + 2));
        entity.setMsgTimetag(cursor.getString(offset + 3));
        entity.setMsgTeam(cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatMessage entity, long rowId) {
        return entity.getMsgId();
    }
    
    @Override
    public String getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessage entity) {
        return entity.getMsgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
