package com.example.sjh.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.sjh.gcsjdemo.entity.Remind;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMIND".
*/
public class RemindDao extends AbstractDao<Remind, String> {

    public static final String TABLENAME = "REMIND";

    /**
     * Properties of entity Remind.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RemindId = new Property(0, String.class, "remindId", true, "REMIND_ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property RemindTime = new Property(2, String.class, "remindTime", false, "REMIND_TIME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Con = new Property(4, String.class, "con", false, "CON");
    }


    public RemindDao(DaoConfig config) {
        super(config);
    }
    
    public RemindDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMIND\" (" + //
                "\"REMIND_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: remindId
                "\"USER_ID\" TEXT NOT NULL ," + // 1: userId
                "\"REMIND_TIME\" TEXT NOT NULL ," + // 2: remindTime
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"CON\" TEXT NOT NULL );"); // 4: con
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_REMIND_REMIND_ID_DESC_USER_ID_DESC ON \"REMIND\"" +
                " (\"REMIND_ID\" DESC,\"USER_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMIND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Remind entity) {
        stmt.clearBindings();
 
        String remindId = entity.getRemindId();
        if (remindId != null) {
            stmt.bindString(1, remindId);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getRemindTime());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getCon());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Remind entity) {
        stmt.clearBindings();
 
        String remindId = entity.getRemindId();
        if (remindId != null) {
            stmt.bindString(1, remindId);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getRemindTime());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getCon());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Remind readEntity(Cursor cursor, int offset) {
        Remind entity = new Remind( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // remindId
            cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // remindTime
            cursor.getString(offset + 3), // title
            cursor.getString(offset + 4) // con
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Remind entity, int offset) {
        entity.setRemindId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setRemindTime(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setCon(cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Remind entity, long rowId) {
        return entity.getRemindId();
    }
    
    @Override
    public String getKey(Remind entity) {
        if(entity != null) {
            return entity.getRemindId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Remind entity) {
        return entity.getRemindId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
